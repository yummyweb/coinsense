import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import dynamic from 'next/dynamic'
import { useWallet } from '@solana/wallet-adapter-react'
import { useEffect, useState } from 'react'
import axios from 'axios'
import { ArrowSquareOut } from '@phosphor-icons/react'
import { Connection, Transaction, clusterApiUrl } from '@solana/web3.js'

const WalletMultiButtonDynamic = dynamic(
  async () => (await import('@solana/wallet-adapter-react-ui')).WalletMultiButton,
  { ssr: false }
)

const WalletDisconnectButtonDynamic = dynamic(
  async () => (await import('@solana/wallet-adapter-react-ui')).WalletDisconnectButton,
  { ssr: false }
)

export default function Home() {
  const wallet = useWallet()
  const [connected, setConnected] = useState(false)
  const [loading, setLoading] = useState(false)
  const [address, setAddress] = useState("")
  const [degenScore, setDegenScore] = useState(0)
  const [nameTags, setNameTags] = useState([])

  const analyzeWallet = async (_address) => {
    setLoading(true)
    const res = await axios.post("/api/analyze_wallet", {
      wallet_address: _address
    })
    setLoading(false)
    setDegenScore(res.data.degen_score)
    setNameTags(res.data.name_tags)
  }

  useEffect(() => {
    if (wallet.connected) {
      setConnected(true)
      analyzeWallet(wallet.publicKey.toString())
    }
    else {
      setConnected(false)
    }
  }, [wallet])

  const mintNFT = async address => {
    const connection = new Connection(clusterApiUrl("devnet"), 'confirmed')

    const res = await axios.post("/api/create_nft", {
      score: degenScore,
      address
    })
    const nftAddress = res.data.mint
    const recoveredTransaction = Transaction.from(Buffer.from(res.data.tx, 'base64'))
    const signed = await wallet.signTransaction(recoveredTransaction)
    const txnSignature = await connection.sendRawTransaction(
      signed.serialize()
    )
    console.log(txnSignature)

    const nftRes = await axios.post("/api/mint_nft", {
      nftAddress,
      address
    })
    const mintTransaction = Transaction.from(Buffer.from(nftRes.data.tx, 'base64'))
    const mintSigned = await wallet.signTransaction(mintTransaction)
    const mintTxSignature = await connection.sendRawTransaction(
      mintSigned.serialize()
    )
    console.log(mintTxSignature)
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Coinsense - Analyse your Wallet</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.nav_title}>
        <h1>CðŸ¤ªINSENSE!</h1>
      </div>
      {nameTags.length > 0 ? (
        <div className={styles.box}>
          <p className={styles.degen_score}>{degenScore}<span className={styles.total_score}>/700</span></p>
          <p className={styles.box_title}>DEGEN SCORE</p>
          {nameTags.length > 0 ? <p className={styles.box_desc}>You are a <span>{nameTags[0]}</span>. <span>A {nameTags[1]}</span>, if you will.</p> : "Loading..."}
          <div className={styles.buttons}>
            {connected ? <WalletDisconnectButtonDynamic className={styles.auth_btn} /> : <button onClick={() => {
              setDegenScore(0)
              setNameTags([])
            }} className={styles.auth_btn}>Go Back</button>}
            <button onClick={() => {
              window.open(`https://translator.shyft.to/address/${wallet.publicKey.toString()}`, '_blank').focus();
            }}>
              <ArrowSquareOut size={28} color="white" weight="light" />
            </button>
          </div>
          { connected ? <button onClick={() => mintNFT(wallet.publicKey.toString())}>Mint your DegeNFT</button> : null }
        </div>
      ) :
        <div className={styles.box}>
          <p className={styles.cta}>{ !loading ? "Connect your wallet to get started!" : "Loading..." }</p>
          {/* <button>Connect</button> */}
          <WalletMultiButtonDynamic>Connect</WalletMultiButtonDynamic>
          <p className={styles.or}>OR</p>
          <form onSubmit={e => {
            e.preventDefault()
            analyzeWallet(address)
          }}>
            <input value={address} onChange={e => setAddress(e.target.value)} placeholder="Enter address" className={styles.input} />
          </form>
        </div>}
      <div className={styles.links}>
        <a target="_blank" href="https://github.com/yummyweb/coinsense">GitHub</a> | <a target="_blank" href="https://twitter.com/AntarikshaVerm2">Twitter</a>
      </div>
    </div>
  )
}
